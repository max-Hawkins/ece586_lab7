#include <iostream>
#include <string.h>

using namespace std;

/* 
    Memory Operation structure that the simulator will execute.
    Parsed in from the input file.
Members:
    Boolean isRead: Whether or not the operation is a read. Else is 'write'
    Integer memAddress: The numeric memory address to either read or write
*/
struct memOp{
    bool isRead;
    int memAddress;
};

/*
    Memory Simulator Class

Used to store all necessary information for the simulation
of a memory hierarchy and memory operations.



*/
class MemorySim{
public:
    int size_main_mem;
    int size_cache;
    int size_line;
    int assoc_deg;
    char replace_policy;
    string input_filename;

    MemorySim(){}

    void display(){
        cout << "\n--- Memory Sim ---" ;
        cout << "\nMain Mem size: " << size_main_mem;
        cout << "\nCache size   : " << size_cache;
        cout << "\nLine size    : " << size_line;
        cout << "\nDegree of ass: " << assoc_deg;
        cout << "\nReplace Pol  : " << replace_policy;
        cout << "\nInput File   : " << input_filename;

        cout << endl;
    }
};

int main(int argc, char *argv[]) {

    char cont_input;

    while(1){

        MemorySim mem_sim = MemorySim();

        cout << "Enter the size of main memory in bytes: ";
        cin >> mem_sim.size_main_mem;
        cout << "Enter the size of the cache in bytes: ";
        cin >> mem_sim.size_cache;
        cout << "Enter the block/line size: ";
        cin >> mem_sim.size_line;
        cout << "Enter the degree of set-associativity (input n for an n-way set-associative mapping): ";
        cin >> mem_sim.assoc_deg;
        cout << "Enter the replacement policy (L = LRU, F = FIFO): ";
        cin >> mem_sim.replace_policy;
        cout << "Enter the name of the input file containing the list of memory references generated by the CPU:";
        cin >> mem_sim.input_filename;


        mem_sim.display();

        // Check if user wants to run another memory simulator
        cout << "Continue? (y = yes, n = no): ";
        cin  >> cont_input;
        // Only continue if input is 'y'since don't need to error check
        // If the input isn't y, default to ending program
        if(cont_input != 'y')
            return 0; // End program
    }
    //return 0;
}